<?php

namespace App\Core\Repository\User;

use App\Core\Entity\Announcement\Announcement;
use App\Core\Entity\Group\Group;
use App\Core\Repository\EntityRepository;
use App\Core\Repository\Filter\UserFilter;
use Doctrine\ORM\ORMException;
use Doctrine\ORM\QueryBuilder;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    protected const ALIAS = "u";
    private const ANNOUNCEMENT_ALIAS = "a";
    private const GROUP_ALIAS = "g";


    /**
     * Creates a query builder from the filter
     *
     * @param UserFilter $filter
     *
     * @return QueryBuilder
     * @throws ORMException
     */
    protected function createFilterQueryBuilder($filter) : QueryBuilder
    {
        /** @var QueryBuilder */
        $queryBuilder = $this->createQueryBuilder(self::ALIAS);
        $queryBuilder->addCriteria($filter->buildCriteria());

        if ($filter->hasAnnouncement())
        {
            $this->hasAnnouncementOnly($queryBuilder);
        }

        if ($filter->hasGroup())
        {
            $this->hasGroupOnly($queryBuilder);
        }

        return $queryBuilder;
    }


    private function hasAnnouncementOnly(QueryBuilder $queryBuilder)
    {
        /** @var string */
        $announcementAlias = self::ANNOUNCEMENT_ALIAS;

        // subquery to get the user announcement
        $subQb = $this->getEntityManager()->createQueryBuilder();
        $subQb->select($announcementAlias)
            ->from(Announcement::class, $announcementAlias)
            ->where($subQb->expr()->eq("$announcementAlias.creator", self::ALIAS));
        $subQuery = $subQb->getQuery()->getDQL();

        $queryBuilder->andWhere($queryBuilder->expr()->exists($subQuery));
    }


    private function hasGroupOnly(QueryBuilder $queryBuilder)
    {
        /** @var string */
        $groupAlias = self::GROUP_ALIAS;

        // subquery to get the user group
        $subQb = $this->getEntityManager()->createQueryBuilder();
        $subQb->select($groupAlias)
            ->from(Group::class, $groupAlias)
            ->where($subQb->expr()->eq("$groupAlias.creator", self::ALIAS));
        $subQuery = $subQb->getQuery()->getDQL();

        $queryBuilder->andWhere($queryBuilder->expr()->exists($subQuery));
    }

}
