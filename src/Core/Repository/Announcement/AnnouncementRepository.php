<?php

namespace App\Core\Repository\Announcement;

use App\Core\Entity\Announcement\Announcement;
use App\Core\Entity\Announcement\AnnouncementPicture;
use App\Core\Entity\User\User;
use App\Core\Repository\EntityRepository;
use App\Core\Repository\Filter\AnnouncementFilter;
use App\Core\Repository\Filter\Pageable\Pageable;
use Doctrine\ORM\QueryBuilder;

/**
 * AnnouncementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnouncementRepository extends EntityRepository
{
    protected const ALIAS = "a";
    private const CREATOR_ALIAS = "c";
    private const PICTURE_ALIAS = "p";


    /**
     * Finds a user's announcements with paging
     *
     * @param User $creator The announcements creator
     * @param Pageable $pageable [optional] Paging information
     * @return Announcement[]
     */
    public function findByCreator(User $creator, Pageable $pageable = null) : array
    {
        $queryBuilder = $this->createQueryBuilder(self::ALIAS);
        $this->joinCreator($queryBuilder, $creator);

        if (!empty($pageable))
        {
            $this->setPaging($queryBuilder, $pageable);
        }

        $query = $queryBuilder->getQuery();
        $query->useQueryCache(true);

        return $query->getResult();
    }


    /**
     * Counts a user's announcements
     *
     * @param User $creator The announcements creator
     * @return int
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function countByCreator(User $creator) : int
    {
        $queryBuilder = $this->createQueryBuilder(self::ALIAS);
        $queryBuilder->select($queryBuilder->expr()->countDistinct(self::ALIAS));
        $this->joinCreator($queryBuilder, $creator);

        $query = $queryBuilder->getQuery();
        $query->useQueryCache(true);

        return $query->getSingleScalarResult();
    }


    /**
     * Finds one announcement with a specific candidate
     *
     * @param User $candidate The candidate
     *
     * @return null|Announcement
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByCandidate(User $candidate)
    {
        $queryBuilder = $this->createQueryBuilder(self::ALIAS);
        $this->havingCandidate($queryBuilder, $candidate);

        $query = $queryBuilder->getQuery();
        $query->useQueryCache(true);

        return $query->getOneOrNullResult();
    }


    /**
     * Creates a query builder with the filter
     *
     * @param AnnouncementFilter $filter
     *
     * @return QueryBuilder
     * @throws \Doctrine\ORM\Query\QueryException
     */
    protected function createFilterQueryBuilder($filter) : QueryBuilder
    {
        /** @var QueryBuilder */
        $queryBuilder = $this->createQueryBuilder(self::ALIAS);
        $queryBuilder->addCriteria($filter->buildCriteria());

        if ($filter->withPictures())
        {
            $this->withPicturesOnly($queryBuilder);
        }

        return $queryBuilder;
    }


    private function withPicturesOnly(QueryBuilder $queryBuilder)
    {
        $pictureAlias = self::PICTURE_ALIAS;

        // subquery to get an announcement pictures
        $subQb = $this->getEntityManager()->createQueryBuilder();
        $subQb->select($pictureAlias)
            ->from(AnnouncementPicture::class, $pictureAlias)
            ->where($subQb->expr()->eq("$pictureAlias.announcement", self::ALIAS));
        $subquery = $subQb->getQuery()->getDQL();

        $queryBuilder->andWhere($queryBuilder->expr()->exists($subquery));
    }


    private function joinCreator(QueryBuilder $queryBuilder, User $creator)
    {
        $queryBuilder->join(self::ALIAS . ".creator", self::CREATOR_ALIAS);
        $queryBuilder->where($queryBuilder->expr()->eq(self::CREATOR_ALIAS, ":creator"));
        $queryBuilder->setParameter("creator", $creator);
    }


    private function havingCandidate(QueryBuilder $queryBuilder, User $candidate)
    {
        $queryBuilder->andWhere($queryBuilder->expr()->isMemberOf(":candidate", self::ALIAS . ".candidates"));
        $queryBuilder->setParameter("candidate", $candidate);
    }

}
