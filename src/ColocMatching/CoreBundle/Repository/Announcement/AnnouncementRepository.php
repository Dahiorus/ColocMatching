<?php

namespace ColocMatching\CoreBundle\Repository\Announcement;

use ColocMatching\CoreBundle\Entity\Announcement\Announcement;
use ColocMatching\CoreBundle\Entity\Announcement\AnnouncementPicture;
use ColocMatching\CoreBundle\Entity\User\User;
use ColocMatching\CoreBundle\Repository\EntityRepository;
use ColocMatching\CoreBundle\Repository\Filter\AnnouncementFilter;
use ColocMatching\CoreBundle\Repository\Filter\HousingFilter;
use Doctrine\DBAL\Types\Type;
use Doctrine\ORM\QueryBuilder;

/**
 * AnnouncementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnouncementRepository extends EntityRepository
{
    protected const ALIAS = "a";
    private const HOUSING_ALIAS = "h";
    private const PICTURE_ALIAS = "p";


    /**
     * Finds one announcement with a specific candidate
     *
     * @param User $candidate The candidate
     *
     * @return null|Announcement
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByCandidate(User $candidate)
    {
        $queryBuilder = $this->createQueryBuilder(self::ALIAS);
        $this->joinCandidate($queryBuilder, $candidate);

        $query = $queryBuilder->getQuery();
        $query->useQueryCache(true);

        return $query->getOneOrNullResult();
    }


    /**
     * Creates a query builder with the filter
     *
     * @param AnnouncementFilter $filter
     *
     * @return QueryBuilder
     * @throws \Doctrine\ORM\Query\QueryException
     */
    protected function createFilterQueryBuilder($filter) : QueryBuilder
    {
        /** @var QueryBuilder */
        $queryBuilder = $this->createQueryBuilder(self::ALIAS);
        $queryBuilder->addCriteria($filter->buildCriteria());

        if (!empty($filter->getHousingFilter()))
        {
            $this->joinHousing($queryBuilder, $filter->getHousingFilter());
        }

        if ($filter->withPictures())
        {
            $this->withPicturesOnly($queryBuilder);
        }

        return $queryBuilder;
    }


    private function joinHousing(QueryBuilder $queryBuilder, HousingFilter $housingFilter)
    {
        $queryBuilder->join(self::ALIAS . ".housing", self::HOUSING_ALIAS);

        if (!empty($housingFilter->getTypes()))
        {
            $queryBuilder->andWhere($queryBuilder->expr()->in("type", ":types"));
            $queryBuilder->setParameter("types", $housingFilter->getTypes(), Type::TARRAY);
        }

        if (!empty($housingFilter->getRoomCount()))
        {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("roomCount", ":roomCount"));
            $queryBuilder->setParameter("roomCount", $housingFilter->getRoomCount(), Type::INTEGER);
        }

        if (!empty($housingFilter->getBedroomCount()))
        {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("bedroomCount", ":bedroomCount"));
            $queryBuilder->setParameter("bedroomCount", $housingFilter->getBedroomCount(), Type::INTEGER);
        }

        if (!empty($housingFilter->getBathroomCount()))
        {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("bathroomCount", ":bathroomCount"));
            $queryBuilder->setParameter("bathroomCount", $housingFilter->getBathroomCount(), Type::INTEGER);
        }

        if (!empty($housingFilter->getSurfaceAreaMin()))
        {
            $queryBuilder->andWhere($queryBuilder->expr()->gte("surfaceArea", ":surfaceAreaMin"));
            $queryBuilder->setParameter("surfaceAreaMin", $housingFilter->getSurfaceAreaMin(), Type::INTEGER);
        }

        if (!empty($housingFilter->getSurfaceAreaMax()))
        {
            $queryBuilder->andWhere($queryBuilder->expr()->lte("surfaceArea", ":surfaceAreaMax"));
            $queryBuilder->setParameter("surfaceAreaMax", $housingFilter->getSurfaceAreaMax(), Type::INTEGER);
        }

        if (!empty($housingFilter->getRoomMateCount()))
        {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("roomMateCount", ":roomMateCount"));
            $queryBuilder->setParameter("roomMateCount", $housingFilter->getRoomMateCount(), Type::INTEGER);
        }
    }


    private function withPicturesOnly(QueryBuilder $queryBuilder)
    {
        $pictureAlias = self::PICTURE_ALIAS;

        // subquery to get an announcement pictures
        $subQb = $this->getEntityManager()->createQueryBuilder();
        $subQb->select($pictureAlias)
            ->from(AnnouncementPicture::class, $pictureAlias)
            ->where($subQb->expr()->eq("$pictureAlias.announcement", self::ALIAS));
        $subquery = $subQb->getQuery()->getDQL();

        $queryBuilder->andWhere($queryBuilder->expr()->exists($subquery));
    }


    private function joinCandidate(QueryBuilder $queryBuilder, User $candidate)
    {
        $queryBuilder->andWhere($queryBuilder->expr()->isMemberOf(":candidate", self::ALIAS . ".candidates"));
        $queryBuilder->setParameter("candidate", $candidate);
    }

}
