<?php

namespace ColocMatching\CoreBundle\Repository\Announcement;

use ColocMatching\CoreBundle\Entity\Announcement\Address;
use ColocMatching\CoreBundle\Repository\EntityRepository;
use ColocMatching\CoreBundle\Repository\Filter\AbstractFilter;
use Doctrine\ORM\QueryBuilder;
use Doctrine\DBAL\Types\Type;

/**
 * AnnouncementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnouncementRepository extends EntityRepository {


    public function findByAddress(Address $address, AbstractFilter $filter): array {
        /** @var QueryBuilder */
        $queryBuilder = $this->createQueryBuilder("a");
        
        $this->setPagination($queryBuilder, $filter);
        $this->setOrderBy($queryBuilder, $filter, "a");
        $this->joinAddress($queryBuilder, $address);
        
        return $queryBuilder->getQuery()->getResult();
    }


    public function selectFieldsByAddress(Address $address, array $fields, AbstractFilter $filter): array {
        /** @var QueryBuilder */
        $queryBuilder = $this->createQueryBuilder("a");
        
        $queryBuilder->select($this->getReturnedFields("a", $fields));
        $this->setPagination($queryBuilder, $filter);
        $this->setOrderBy($queryBuilder, $filter, "a");
        $this->joinAddress($queryBuilder, $address);
        
        return $queryBuilder->getQuery()->getResult();
    }


    public function countByAddress(Address $address) {
        /** @var QueryBuilder */
        $queryBuilder = $this->createQueryBuilder("a");
        
        $queryBuilder->select($queryBuilder->expr()->count("a"));
        $this->joinAddress($queryBuilder, $address);
        
        return $queryBuilder->getQuery()->getSingleScalarResult();
    }


    private function joinAddress(QueryBuilder &$queryBuilder, Address $address) {
        $queryBuilder->join("a.location", "l");
        
        if (!empty($address->getStreetNumber())) {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("l.streetNumber", ":streetNumber"))->setParameter(
                "streetNumber", $address->getStreetNumber(), Type::STRING);
        }
        
        if (!empty($address->getRoute())) {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("l.route", ":route"))->setParameter("route", 
                $address->getRoute(), Type::STRING);
        }
        
        if (!empty($address->getLocality())) {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("l.locality", ":locality"))->setParameter("locality", 
                $address->getLocality(), Type::STRING);
        }
        
        if (!empty($address->getCountry())) {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("l.country", ":country"))->setParameter("country", 
                $address->getCountry(), Type::STRING);
        }
        
        if (!empty($address->getZipCode())) {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("l.zipCode", ":zipCode"))->setParameter("zipCode", 
                $address->getZipCode());
        }
    }

}
