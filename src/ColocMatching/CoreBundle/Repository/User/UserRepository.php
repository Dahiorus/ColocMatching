<?php

namespace ColocMatching\CoreBundle\Repository\User;

use ColocMatching\CoreBundle\Entity\User\Profile;
use ColocMatching\CoreBundle\Entity\User\User;
use ColocMatching\CoreBundle\Repository\EntityRepository;
use ColocMatching\CoreBundle\Repository\Filter\ProfileFilter;
use ColocMatching\CoreBundle\Repository\Filter\UserFilter;
use Doctrine\DBAL\Types\Type;
use Doctrine\ORM\QueryBuilder;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository {


    public function findByFilter(UserFilter $filter, array $fields = null): array {
        /** @var QueryBuilder */
        $queryBuilder = $this->createFilterQueryBuilder($filter, "u");
        $this->setPagination($queryBuilder, $filter);

        if (!empty($fields)) {
            $queryBuilder->select($this->getReturnedFields("u", $fields));
        }

        return $queryBuilder->getQuery()->getResult();
    }


    public function countByFilter(UserFilter $filter): int {
        /** @var QueryBuilder */
        $queryBuilder = $this->createFilterQueryBuilder($filter, "u");
        $queryBuilder->select($queryBuilder->expr()->countDistinct("u"));

        return $queryBuilder->getQuery()->getSingleScalarResult();
    }


    private function createFilterQueryBuilder(UserFilter $filter, string $alias = "u"): QueryBuilder {
        /** @var QueryBuilder */
        $queryBuilder = $this->createQueryBuilder($alias);
        $queryBuilder->addCriteria($filter->buildCriteria());

        if (!empty($filter->getProfileFilter())) {
            $this->joinProfile($queryBuilder, $filter->getProfileFilter(), $alias, "p");
        }

        return $queryBuilder;
    }


    private function joinProfile(QueryBuilder &$queryBuilder, ProfileFilter $profileFilter, string $alias = "u",
        string $profileAlias = "p") {
        $queryBuilder->join("$alias.profile", $profileAlias);

        if (!empty($profileFilter->getGender()) && $profileFilter->getGender()) {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("$profileAlias.gender", ":gender"));
            $queryBuilder->setParameter("gender", $profileFilter->getGender(), Type::STRING);
        }

        if (!empty($profileFilter->getAgeStart())) {
            $ageStart = $profileFilter->getAgeStart();

            $queryBuilder->andWhere($queryBuilder->expr()->lte("$profileAlias.birthDate", ":ageStart"));
            $queryBuilder->setParameter("ageStart", new \DateTime("-$ageStart years"), Type::DATE);
        }

        if (!empty($profileFilter->getAgeEnd())) {
            $ageEnd = $profileFilter->getAgeEnd();

            $queryBuilder->andWhere($queryBuilder->expr()->gte("$profileAlias.birthDate", ":ageEnd"));
            $queryBuilder->setParameter("ageEnd", new \DateTime("-$ageEnd years"), Type::DATE);
        }

        if ($profileFilter->getWithDescription()) {
            $queryBuilder->andWhere($queryBuilder->expr()->isNotNull("$profileAlias.description"));
        }

        if ($profileFilter->isSmoker() != null) {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("$profileAlias.smoker", ":smoker"));
            $queryBuilder->setParameter("smoker", $profileFilter->isSmoker(), Type::BOOLEAN);
        }

        if ($profileFilter->hasJob() != null) {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("$profileAlias.hasJob", ":hasJob"));
            $queryBuilder->setParameter("hasJob", $profileFilter->hasJob(), Type::BOOLEAN);
        }

        if (!empty($profileFilter->getDiet())) {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("$profileAlias.diet", ":diet"));
            $queryBuilder->setParameter("diet", $profileFilter->getDiet(), Type::STRING);
        }

        if (!empty($profileFilter->getMaritalStatus())) {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("$profileAlias.maritalStatus", ":maritalStatus"));
            $queryBuilder->setParameter("maritalStatus", $profileFilter->getMaritalStatus(), Type::STRING);
        }

        if (!empty($profileFilter->getSocialStatus())) {
            $queryBuilder->andWhere($queryBuilder->expr()->eq("$profileAlias.socialStatus", ":socialStatus"));
            $queryBuilder->setParameter("socialStatus", $profileFilter->getSocialStatus(), Type::STRING);
        }
    }

}
